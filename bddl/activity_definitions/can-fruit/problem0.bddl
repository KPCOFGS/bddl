(define (problem can-fruit_0)
    (:domain omnigibson)

    (:objects
        water.n.06_1 - water.n.06
        stockpot.n.01_1 - stockpot.n.01
        cabinet.n.01_1 - cabinet.n.01
        mason_jar.n.01_1 mason_jar.n.01_2 - mason_jar.n.01
        edible_fruit.n.01_1 edible_fruit.n.01_2 edible_fruit.n.01_3 edible_fruit.n.01_4 - edible_fruit.n.01
        electric_refrigerator.n.01_1 - electric_refrigerator.n.01
        countertop.n.01_1 - countertop.n.01
        floor.n.01_1 - floor.n.01
        agent.n.01_1 - agent.n.01
    )
    
    (:init 
        (filled stockpot.n.01_1 water.n.06_1) 
        (inside mason_jar.n.01_1 cabinet.n.01_1) 
        (inside mason_jar.n.01_2 cabinet.n.01_1) 
        (inside edible_fruit.n.01_1 electric_refrigerator.n.01_1) 
        (inside edible_fruit.n.01_2 electric_refrigerator.n.01_1) 
        (inside edible_fruit.n.01_3 electric_refrigerator.n.01_1) 
        (inside edible_fruit.n.01_4 electric_refrigerator.n.01_1) 
        (ontop stockpot.n.01_1 countertop.n.01_1) 
        (inroom cabinet.n.01_1 kitchen) 
        (inroom electric_refrigerator.n.01_1 kitchen) 
        (inroom countertop.n.01_1 kitchen) 
        (inroom floor.n.01_1 kitchen) 
        (ontop agent.n.01_1 floor.n.01_1)
    )
    
    (:goal 
        (and 
            (forall 
                (?mason_jar.n.01 - mason_jar.n.01) 
                (and
                    (inside ?mason_jar.n.01 ?cabinet.n.01_1)
                    (forn
                        (2)
                        (?edible_fruit.n.01 - edible_fruit.n.01)
                        (inside ?edible_fruit.n.01 ?mason_jar.n.01)
                    )
                    (filled ?mason_jar.n.01 ?water.n.06_1)
                )
            ) 
            (forall 
                (?mason_jar.n.01 - mason_jar.n.01)
                (closed ?mason_jar.n.01)
            )
        )
    )
)