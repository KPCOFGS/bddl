(define (problem can-vegetables_0)
    (:domain omnigibson)

    (:objects
        vegetable.n.01_1 vegetable.n.01_2 vegetable.n.01_3 - vegetable.n.01
        chopping_board.n.01_1 - chopping_board.n.01
        mason_jar.n.01_1 mason_jar.n.01_2 mason_jar.n.01_3 - mason_jar.n.01
        cabinet.n.01_1 - cabinet.n.01
        lid.n.02_1 lid.n.02_2 lid.n.02_3 - lid.n.02
        countertop.n.01_1 - countertop.n.01
        carving_knife.n.01_1 - carving_knife.n.01
        floor.n.01_1 - floor.n.01
        agent.n.01_1 - agent.n.01
    )
    
    (:init 
        (ontop vegetable.n.01_1 chopping_board.n.01_1) 
        (ontop vegetable.n.01_2 chopping_board.n.01_1) 
        (ontop vegetable.n.01_3 chopping_board.n.01_1) 
        (inside mason_jar.n.01_1 cabinet.n.01_1) 
        (inside mason_jar.n.01_2 cabinet.n.01_1) 
        (inside mason_jar.n.01_3 cabinet.n.01_1) 
        (inside lid.n.02_1 cabinet.n.01_1) 
        (inside lid.n.02_2 cabinet.n.01_1) 
        (inside lid.n.02_3 cabinet.n.01_1) 
        (ontop carving_knife.n.01_1 chopping_board.n.01_1) 
        (ontop chopping_board.n.01_1 countertop.n.01_1) 
        (inroom cabinet.n.01_1 kitchen) 
        (inroom countertop.n.01_1 kitchen) 
        (inroom floor.n.01_1 kitchen) 
        (ontop agent.n.01_1 floor.n.01_1)
    )
    
    (:goal 
        (and 
            (forpairs 
                (?vegetable.n.01 - vegetable.n.01)
                (?mason_jar.n.01 - mason_jar.n.01)
                (inside ?vegetable.n.01 ?mason_jar.n.01)
            )
            (forpairs 
                (?lid.n.02 - lid.n.02)
                (?mason_jar.n.01 - mason_jar.n.01)
                (ontop ?lid.n.02 ?mason_jar.n.01)
            )
            (forall 
                (?mason_jar.n.01 - mason_jar.n.01) 
                (inside ?mason_jar.n.01 ?cabinet.n.01_1)
            ) 
        )
    )
)